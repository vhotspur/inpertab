<?xml version="1.0"?>
<plugin xmlns:l="http://github.com/vhotspur/sxmloc">
	<name><l:g>State of matter</l:g></name>
	<id>slgstate</id>

	<board>
		<div id="p-slgstate-slider">
			<l:g>Temperature:
				<input type="text" maxlength="5" id="p-slgstate-in-kelvin" /> (K),
				<input type="text" maxlength="5" id="p-slgstate-in-celsius" /> (°C)
			</l:g>
			<div id="p-slgstate-ctrl-temp"></div>
		</div>
		<div id="p-slgstate-legend">
			<l:g>Legend:
				<span class="p-slgstate-solid">solid</span>
				<span class="p-slgstate-liquid">liquid</span>
				<span class="p-slgstate-gas">gas</span>
				<span class="p-slgstate-unknown">unknown</span>
			</l:g>
		</div>
	</board>
	
	<css>
		.p-slgstate-solid { background-color: #809FFF; }
		.p-slgstate-liquid { background-color: #FF8080; }
		.p-slgstate-gas { background-color: #8AE673; }
		#p-slgstate-legend, #p-slgstate-slider {
			margin: 1em;
		}
		#p-slgstate-legend SPAN {
			padding: 5px;
			border: 1px solid;
			margin-left: 1ex;
		}
		#p-slgstate-slider INPUT {
			width: 5em;
			text-align: right;
		}
		.error {
			background-color: #f99;
		}
	</css>
	
	<method name="clearClasses" parameters="">
		this.pte.forEach(function(elem) {
			elem.removeCssClass("p-slgstate-solid");
			elem.removeCssClass("p-slgstate-liquid");
			elem.removeCssClass("p-slgstate-gas");
                });
	</method>

	<resume>
		$("#p-slgstate-ctrl-temp").slider("value", $("#p-slgstate-ctrl-temp").slider("value"));
		this.pte.forEach(function(element) {
			if (element.meltingPoint &gt;= 0) {
				var temp = Math.round(element.meltingPoint - 273.15);
				element.setExtraAbove(temp + "°C");
			}
			if (element.boilingPoint &gt;= 0) {
				var temp = Math.round(element.boilingPoint - 273.15);
				element.setExtraBelow(temp + "°C");
			}
		});
	</resume>
	
	<suspend>
		this.clearClasses();
	</suspend>

	<init>
		// initialize the controls
                $("#p-slgstate-ctrl-temp").slider({
                        max: 6000,
                        min: 0,
                        slide: $.proxy(this.onSlide, this),
                        change: $.proxy(this.onSlide, this)
                });
		$("#p-slgstate-ctrl-temp").slider("value", 293);
		this.bindTextInputChanges("#p-slgstate-in-kelvin",
			$.proxy(this.onKelvin, this));
		this.bindTextInputChanges("#p-slgstate-in-celsius",
			$.proxy(this.onCelsius, this));
		this.updateFromFields = 0;
		this.clearClasses();
	</init>
	
	<method name="onSlide" parameters="event, ui">
		$("#p-slgstate-label-temp").text(ui.value);
                this.pte.clearHighlighting();
		this.clearClasses();
                this.pte.forEachElement2(ui.value, function(pte, elem, temp) {
			var state = elem.getStateOfMatter(temp);
			elem.addCssClass("p-slgstate-" + state);	
                });
		if (!this.updateFromFields) {
			$("#p-slgstate-in-kelvin").val(ui.value);
			$("#p-slgstate-in-celsius").val(ui.value - 273);
		}
                return true;
	</method>
	
	<method name="updateSlider" parameters="kelvin">
		$("#p-slgstate-ctrl-temp").slider("value", kelvin);
	</method>
	
	<method name="checkAndUpdate" parameters="inpField, otherField, tempShift, otherTempShift">
		if (this.updateFromFields) {
			return;
		}
		
		var ctrl = "#p-slgstate-in-" + inpField;
		var ctrl2 = "#p-slgstate-in-" + otherField;
		
		$(ctrl).removeClass("error");
		$(ctrl2).removeClass("error");
		
		var t = $(ctrl).val();
		if (t == "") {
			return;
		}
		
		var kelvin = t * 1 + tempShift;
		if (!this.checkKelvin(kelvin)) {
			$(ctrl).addClass("error");
			return;
		}
		
		this.updateFromFields = 1;
		this.updateSlider(kelvin);
		$(ctrl2).val(kelvin + otherTempShift);
		this.updateFromFields = 0;
	</method>
	
	<method name="checkKelvin" parameters="temp">
		if (isNaN(temp)) {
			return false;
		}
		if (temp &lt; 0) {
			return false;
		}
		if (temp &gt; 6000) {
			return false;
		}
		return true;
	</method>
	
	<method name="onKelvin">
		this.checkAndUpdate("kelvin", "celsius", 0, -273);
	</method>
	
	<method name="onCelsius">
		this.checkAndUpdate("celsius", "kelvin", 273, 0);
	</method>
</plugin>

