<?xml version="1.0"?>
<plugin xmlns:l="http://github.com/vhotspur/sxmloc">
	<name><l:g>Element pin-pointing</l:g></name>
	<id>pinpointgame</id>

	<board>
		<form id="p-pinpointgame-game-kind">
			<div id="p-pinpointgame-game-groups">
			</div>
			<div id="p-pinpointgame-game-subgroups">
			</div>
			<div>
			<input type="button" id="p-pinpointgame-start-game" />
			<input type="button" id="p-pinpointgame-stop-game" />
			</div>
		</form>
		<div id="p-pinpointgame-quest">
			<l:g>Pin-point the following element: <span id="p-pinpointgame-clue" />.</l:g>
		</div>
		<div id="p-pinpointgame-congrats">
			<p id="p-pinpointgame-congrats-msg">
				<span style="font-size: 150%; color: blue">
					<l:g>Congratulations! You got it right :-).</l:g>
				</span>
				<br />
				<span id="p-pinpointgame-congrats-first-try">
					<l:g>And on the first try! Excellent ;-).</l:g>
				</span>
				<span id="p-pinpointgame-congrats-tries">
					<l:g>Attempts needed: <span />.</l:g>
				</span>
			</p>
		</div>
		<div id="p-pinpointgame-stats">
			<p>
				<l:g>It took you <span id="p-pinpointgame-stats-total" /> tries to find <span id="p-pinpointgame-stats-elements" /> elements.</l:g>
			</p>
			<p id="p-pinpointgame-stats-first-guess">
				<l:g>You scored <span id="p-pinpointgame-stats-first-count" /> on the first hit.</l:g>
			</p>
		</div> 
	</board>
	
	<css>
		.p-pinpointgame-badguess {
			background: #FF8080;
		}
	</css>

	<resume>
		this.pte.hideElements();
		this.nextRound();
	</resume>
	
	<suspend>
		if (!this.stopGameClicked()) {
			return false;
		}
		
		$("TD.element").removeClass("p-pinpointgame-badguess");
		this.pte.showElements();
		$("TD.element").unbind("click");
		$("TD.element").bind("click", this.pte, function(event) {
			event.data.showElementDetails($(this).attr("id").substring(5));		
		});
	</suspend>

	<init>
		this.subGames = new Array(
			{
				"id" : "base",
				"name" : "<l:g>Base</l:g>",
				"subgroups" : new Array(
					{
						"id" : "1a",
						"name" : "I.A",
						"elements" : new Array("H", "Li")
					},
					{
						"id" : "2a",
						"name" : "II.A",
						"elements" : new Array("Be", "Mg")
					}
				)
			},
			{
				"id" : "metals",
				"name" : "<l:g>Metals</l:g>",
				"subgroups" : new Array(
					{
						"id" : "3b",
						"name" : "III.B",
						"elements" : new Array("Sc", "Y")
					}
				)
			},
			{
				"id" : "all",
				"name" : "<l:g>All</l:g>",
				"subgroups" : new Array(),
				"elements" : new Array("H", "Li", "Be", "Mg")
			}
		);
		
		var i;
		for (i = 0; i &lt; this.subGames.length; i++) {
			var elem_id = "p-pinpointgame-game-group-" + this.subGames[i]["id"];
			var subgroup_id = "p-pinpointgame-game-subgroup-"
				+ this.subGames[i]["id"];
			var radio_elem = $('&lt;input&gt;').attr({
				type: 'radio',
				name: 'p-pinpointgame-game-group',
				value: this.subGames[i]["id"],
				id: elem_id
			});
			$(radio_elem).click(function() {
				$("#p-pinpointgame-game-subgroups DIV").hide();
				$("#p-pinpointgame-game-subgroup-" + $(this).val()).show();
			});
			var label_elem = $('&lt;label&gt;').attr({
				for: elem_id
			});
			label_elem.append(this.subGames[i]["name"]);
			$("#p-pinpointgame-game-groups").append(radio_elem);
			$("#p-pinpointgame-game-groups").append(label_elem);
			
			if (this.subGames[i]["subgroups"].length > 0) {
				$("#p-pinpointgame-game-subgroups").append(
					"&lt;div id=\"" + subgroup_id + "\"&gt;&lt;/div&gt;");
				var j;
				for (j = 0; j &lt; this.subGames[i]["subgroups"].length; j++) {
					var check_id = "p-pinpoint-game-subgroup-"
						+ this.subGames[i]["id"]
						+  this.subGames[i]["subgroups"][j]["id"];
					var check_elem = $('&lt;input&gt;').attr({
						type: 'checkbox',
						name: 'p-pinpoint-game-subgroup-'  + this.subGames[i]["id"],
						value:  this.subGames[i]["subgroups"][j]["id"],
						checked: j == 0,
						id: check_id
					});
					var check_label_elem = $('&lt;label&gt;').attr({
						for: check_id
					});
					check_label_elem.append(this.subGames[i]["subgroups"][j]["name"]);
					
					$("#" + subgroup_id).append(check_elem);
					$("#" + subgroup_id).append(check_label_elem);
				}
				
				$("#" + subgroup_id).buttonset();
				$("#" + subgroup_id).hide();
			}
		}

		$("#p-pinpointgame-game-groups").buttonset();
		$("#p-pinpointgame-game-groups INPUT:radio:first").click();
		$("#p-pinpointgame-game-groups INPUT:radio:first").button("refresh");
		
		$("#p-pinpointgame-start-game").button({label: "<l:g>Start game</l:g>"});
		$("#p-pinpointgame-start-game").click($.proxy(this.startGameClicked, this));
		
		$("#p-pinpointgame-stop-game").button({label: "<l:g>Stop game</l:g>"});
		$("#p-pinpointgame-stop-game").click($.proxy(this.stopGameClicked, this));
		$("#p-pinpointgame-stop-game").hide();
		
		$("#p-pinpointgame-quest").hide();
		
		this.pte.hideElements();
					
		this.allowedElements = new Array();
		this.answer = -1;
		this.elementsPerGame = 10;
		
		$("#p-pinpointgame-congrats").hide();
		$("#p-pinpointgame-stats").hide();
		this.gameRunning = 0;
		this.toBeGuessed = new Array();
		this.triesTotal = 0;
		this.toBeGuessedCount = 0;
	</init>
	
	<method name="startGameClicked" parameters="">
		var group_id = $("input[name=p-pinpointgame-game-group]:radio:checked").val();
		var group_index = -1;
		var i;
		for (i = 0; i &lt; this.subGames.length; i++) {
			if (this.subGames[i]["id"] == group_id) {
				group_index = i;
				break;
			}
		}
		if (group_index == -1) {
			alert("<l:g>No game selected.</l:g>");
			return false;
		}
		
		var allowed_elements = new Array();
		if (this.subGames[group_index]["subgroups"].length == 0) {
			allowed_elements = this.subGames[group_index]["elements"];
		} else {
			var checked_subgroups = $("input[name=p-pinpoint-game-subgroup-" + group_id + "]:checkbox:checked");
			var j;
			for (j = 0; j &lt; this.subGames[group_index]["subgroups"].length; j++) {
				if ($("#p-pinpoint-game-subgroup-"
						+ group_id
						+ this.subGames[group_index]["subgroups"][j]["id"]
						+ ":checked").val()) {
					$.merge(allowed_elements, this.subGames[group_index]["subgroups"][j]["elements"]);
				}
			}
		}
		
		if (allowed_elements.length == 0) {
			alert("<l:g>No elements selected.</l:g>");
			return false;
		}
		
		this.startGame(allowed_elements);
		
		return true;
	</method>
	
	<method name="stopGameClicked" parameters="">
		if (this.gameRunning) {
			var answer = window.confirm("<l:g>Abort current game?</l:g>");
			if (!answer) {
				return false;
			}
		}
		
		this.gameRunning = 0; 
		
		$("#p-pinpointgame-stop-game").hide();
		$("#p-pinpointgame-start-game").show();
		$("#p-pinpointgame-game-groups, #p-pinpointgame-game-subgroups").show();
		$("#p-pinpointgame-quest").hide();
		
		return true;
	</method>
	
	<method name="successDialog" parameters="">
		$("#p-pinpointgame-quest").hide();
		$("#p-pinpointgame-congrats").show();
		if (this.answerTries == 0) {
			$("#p-pinpointgame-congrats-first-try").show();
			$("#p-pinpointgame-congrats-tries").hide();
		} else {
			$("#p-pinpointgame-congrats-first-try").hide();
			$("#p-pinpointgame-congrats-tries SPAN").text(this.answerTries);
			$("#p-pinpointgame-congrats-tries").show();
		}
		$("#p-pinpointgame-congrats").show();
		$("#p-pinpointgame-congrats").fadeOut(4000, function() {
			if (this.gameRunning) {
				$("#p-pinpointgame-quest").fadeIn("slow");
			}
		});
		this.nextRound();
	</method>
	
	<method name="nextRound" parameters="">
		if (!this.gameRunning) {
			return;
		}
		
		if (this.toBeGuessed.length == 0) {
			if (this.gameRunning) {
				this.displayStatistics();
			}
			this.gameRunning = 0;
			this.stopGameClicked();
			return;
		}
		$("#p-pinpointgame-stats").hide();
		var idx = this.toBeGuessed.splice(0, 1);
		this.answer = this.allowedElements[idx];
		this.answerElement = this.pte.getElementInfo(this.answer);
		this.answerTries = 0;
		
		$("#p-pinpointgame-quest").show();
		$("#p-pinpointgame-clue").text(this.answerElement.symbol);
		$("TD.element").removeClass("p-pinpointgame-badguess");
		
		$("TD.element").unbind("click");
		$("TD.element").bind("click", this, function(event) {
			var plugin = event.data;
			var id = $(this).attr("id").substring(5);
			var element = plugin.pte.getElementInfo(id);
			var symbol = element.symbol;
			plugin.triesTotal++;
			if (plugin.answer == symbol) {
				plugin.successDialog();
			} else {
				/* bad answer */
				$(this).addClass("p-pinpointgame-badguess");
				plugin.pte.showElement(element);
				plugin.answerTries++;
			}
		});
	</method>
	
	<method name="startGame" parameters="allowedElements">
		if (this.gameRunning) {
			var answer = window.confirm("<l:g>Abort current game?</l:g>");
			if (!answer) {
				return false;
			}
		}
		this.allowedElements = allowedElements;
		var length = allowedElements.length;
		var guessedCount = length &gt; this.elementsPerGame ? this.elementsPerGame : length;
		var guessedIndexes = new Array(guessedCount);
		var i, j;
		for (i = 0; i &lt; guessedCount; i++) {
			var indexOk;
			var idx;
			do {
				indexOk = 1;
				idx = Math.floor(Math.random() * length);
				for (j = 0; j &lt; i; j++) {
					if (guessedIndexes[j] == idx) {
						indexOk = 0;
						break;
					}
				}
			} while (!indexOk);
			guessedIndexes[i] = idx;
		}
		this.gameRunning = 1;
		this.toBeGuessed = guessedIndexes;
		this.toBeGuessedCount = guessedCount;
		this.nextRound();
		
		$("#p-pinpointgame-stop-game").show();
		$("#p-pinpointgame-start-game").hide();
		$("#p-pinpointgame-game-groups, #p-pinpointgame-game-subgroups").hide();
		return true;
	</method>
	
	<method name="displayStatistics">
		this.gameRunning = 0;
		
		alert("Game ended - you needed " + this.triesTotal + " tries to find " + this.toBeGuessedCount + " elements.");

		$("#p-pinpointgame-stats-first-guess").hide();
	</method>
</plugin>

